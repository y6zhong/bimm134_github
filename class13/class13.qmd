---
title: "class 13: RNASeq Analysis with DESeq2"
author: "chelsea A16871799"
format: pdf
---

The data for this handson session comes from published RNA-seq experiemnt where irway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```
```{r}
head(metadata)
```
Q1. How many genes are in this dataset? 
```{r}
nrow(counts)
```

Q2. How many ‘control’ cell lines do we have?
```{r}
table(metadata$dex)
```


Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

Now we calculate mean counts per gene in the "control sample" we can then compare value for each gene to mean counts in the treated sample. 
step 1. Find which columns in `counts` correspond to "control" sample.
Step 2 caluculate mean value per gene in these columns.
step 3. Store my answer for later for control mean.
```{r}
control.inds <- metadata$dex=="control"
```
```{r}
metadata[control.inds,]
```
```{r}
control.counts <- counts[,control.inds]
head(control.counts)
```
```{r}
#apply(control.counts,1, mean)
control.mean <- rowMeans(control.counts)
```

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)
```{r}
treated.inds <- metadata$dex=="treated"
```
```{r}
metadata[treated.inds,]
```


```{r}
treated.counts <- counts[,treated.inds]
head(treated.counts)
```

```{r}
#apply(treated.counts,1, mean)
treated.mean <- rowMeans(treated.counts)
```

to keep it tidy, make the control.mean and treated.mean vectos together as two columns of new data frame

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```
```{r}
head(meancounts)
```
```{r}
plot(meancounts)
```
Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.
```{r}
library(ggplot2)

ggplot(meancounts)+
  aes(control.mean,treated.mean)+
geom_point(alpha=0.2)
```
Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```
log transformation are super useful when our data is skewed and measured over a wide range. We can use different log transformation like base10 or natural logs b ut we most often prefer 1og2 units. 
```{r}
#control/treated
log2(10/10)
```
what if there was a doubling
```{r}
log2(20/10)
```
what if there was a half
```{r}
log2(10/20)
```

let add log2 fold-change column to our mean.counts dataframe 
```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```
There are a couple of “weird” results. Namely, the NaN (“not a number”) and -Inf (negative infinity) results.

The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero. It turns out that there are a lot of genes with zero expression. Let’s filter our data to remove these genes. 
```{r}
to.rm.inds <- rowSums(meancounts[,1:2]==0)>0
mycounts <- meancounts[!to.rm.inds,]
```
The `!` mark flips TRUE value to False value vice versa.
```{r}
x <- c(TRUE,FALSE,TRUE)
!x
```

Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
#which()tells you what/where true value are. Unique() function 

```{r}
dim(mycounts)
```
```{r}
head(mycounts)
```
A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.
```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 
```{r}
sum(up.ind)
```

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 
```{r}
sum(down.ind)
```
Q10. Do you trust these results? Why or why not?
#all  analysis has been done based on fold change. However, fold change can be large (without being statistically significant. We haven't determine whether the differences we are seeing are significant which would result in misleading result.
We will use DESeq2 package to do this analysis properly
```{r}
library(DESeq2)
```
set up input object required by DESeq
```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```
Now we run our analysis
```{r}
dds <- DESeq(dds)
```
get the result
```{r}
res <- results(dds)
head(res)
```
A summary results plot
Volcano plot
This is common type of summary figures that keep both our inner biologist and inner stats nerd happy because it show p-values and log2(fold-changes).
```{r}
plot(res$log2FoldChange,-log(res$padj))

# Add some cut-off lines
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.05), col="blue", lty=2)
```
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.1), col="blue", lty=2)
```

save our result
```{r}
write.csv(res, file="deseq_result.csv")
```
```{r}
head(res)
```
Our result table so far only contains the Ensembl gene IDs. However, alternative gene names and extra annotation are usually required for informative interpretation of our results. In this section we will add this necessary annotation data to our results.
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```
The main function we use here called `mapIds()`
our current IDs are here:
```{r}
head(row.names(res))
```
These are ENSEMBLE format
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```
#pathway analysis
we will use the **gage** package alongwith **pathway** here to gene set enrichemnt and figure generation respectively.
```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
add ENTREZ ids as `names()` to my `foldchanges` vector.
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

now we can run `gage()` with this input vector 
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```
Look at the result
```{r}
attributes(keggres)
```
```{r}
head(keggres$less,3)
```
we can view these pathways with our geneset gene highighted using the `pathway()` function.

```{r}
pathview(gene.data=foldchanges,pathway.id="hsa05310")
```
![My gene involved in Athsma Pathway](hsa05310.pathview.png)








